{"version":3,"file":"chunks/644.21c16f18d73b4a5c7277.min.js","mappings":"yGAMA,EAAQ,M,oBCEP,WACG,aAEA,IAcIA,EAASC,QAAQC,KAAKC,MAAMC,QAAQ,yBAMpCC,EAAqB,SAAUC,EAAQC,EAAWC,GAC1CF,EAAOG,IACbC,YAAYJ,EAAOK,UAAW,oBAClCH,EAAaI,KAAKJ,EAAaK,OAPV,SAAUP,EAAQQ,GACvCR,EAAOS,KAAK,eAAgB,CAAED,MAAOA,GACvC,CAMEE,CAAiBV,EAAQE,EAAaK,MACxC,EAyBII,EAAoB,SAAUX,EAAQE,GACxC,OAAO,SAAUU,GACfA,EAAIC,UAAUX,EAAaK,OAC3B,IAAIO,EAAsB,SAAUC,GAClC,OAAOH,EAAIC,UAAUE,EAAEP,MACzB,EAEA,OADAR,EAAOgB,GAAG,eAAgBF,GACnB,WACL,OAAOd,EAAOiB,IAAI,eAAgBH,EACpC,CACF,CACF,EAoBEpB,EAAOwB,IAAI,gBAAgB,SAAUlB,EAAQC,GAC3C,IAjFEkB,EAiFEjB,GAjFFiB,GAiFsB,EA1EnB,CACLZ,IAPQ,WACR,OAAOY,CACT,EAMEb,IALQ,SAAUc,GAClBD,EAAQC,CACV,KAoBe,SAAUpB,EAAQC,EAAWC,GAC5CF,EAAOqB,WAAW,mBAAmB,WACnCtB,EAAmBC,EAAQC,EAAWC,EACxC,GACF,CAoDIoB,CAAWtB,EAAQC,EAAWC,GArBnB,SAAUF,EAAQE,GAC/B,IAAIqB,EAAW,WACb,OAAOvB,EAAOwB,YAAY,kBAC5B,EACAxB,EAAOyB,GAAGC,SAASC,gBAAgB,eAAgB,CACjDC,KAAM,eACNC,QAAS,cACTN,SAAUA,EACVO,QAASnB,EAAkBX,EAAQE,KAErCF,EAAOyB,GAAGC,SAASK,kBAAkB,eAAgB,CACnDC,KAAM,cACNJ,KAAM,eACNL,SAAUA,EACVO,QAASnB,EAAkBX,EAAQE,IAEvC,CAMI+B,CAASjC,EAAQE,GA/CT,SAAUF,EAAQC,EAAWC,GACvCF,EAAOgB,GAAG,sCAAsC,SAAUD,GACpDb,EAAaK,OACfP,EAAOG,IAAIC,YAAYJ,EAAOK,UAAW,mBAA+B,wBAAXU,EAAEmB,KAEnE,IACAlC,EAAOgB,GAAG,QAAQ,YAVK,SAAUhB,GACjC,OAAOA,EAAOmC,SAAS,8BAA8B,EAAO,UAC9D,EASQC,CAAmBpC,IACrBD,EAAmBC,EAAQC,EAAWC,EAE1C,GACF,CAqCImC,CAAMrC,EAAQC,EAAWC,EAC3B,GAKN,CA9FA,E","sources":["webpack://plone-mosaic/./node_modules/tinymce/plugins/visualblocks/index.js","webpack://plone-mosaic/./node_modules/tinymce/plugins/visualblocks/plugin.js"],"sourcesContent":["// Exports the \"visualblocks\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/visualblocks')\n//   ES2015:\n//     import 'tinymce/plugins/visualblocks'\nrequire('./plugin.js');","/**\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\n * Licensed under the LGPL or a commercial license.\n * For LGPL see License.txt in the project root for license information.\n * For commercial licenses see https://www.tiny.cloud/\n *\n * Version: 5.10.7 (2022-12-06)\n */\n(function () {\n    'use strict';\n\n    var Cell = function (initial) {\n      var value = initial;\n      var get = function () {\n        return value;\n      };\n      var set = function (v) {\n        value = v;\n      };\n      return {\n        get: get,\n        set: set\n      };\n    };\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var fireVisualBlocks = function (editor, state) {\n      editor.fire('VisualBlocks', { state: state });\n    };\n\n    var toggleVisualBlocks = function (editor, pluginUrl, enabledState) {\n      var dom = editor.dom;\n      dom.toggleClass(editor.getBody(), 'mce-visualblocks');\n      enabledState.set(!enabledState.get());\n      fireVisualBlocks(editor, enabledState.get());\n    };\n\n    var register$1 = function (editor, pluginUrl, enabledState) {\n      editor.addCommand('mceVisualBlocks', function () {\n        toggleVisualBlocks(editor, pluginUrl, enabledState);\n      });\n    };\n\n    var isEnabledByDefault = function (editor) {\n      return editor.getParam('visualblocks_default_state', false, 'boolean');\n    };\n\n    var setup = function (editor, pluginUrl, enabledState) {\n      editor.on('PreviewFormats AfterPreviewFormats', function (e) {\n        if (enabledState.get()) {\n          editor.dom.toggleClass(editor.getBody(), 'mce-visualblocks', e.type === 'afterpreviewformats');\n        }\n      });\n      editor.on('init', function () {\n        if (isEnabledByDefault(editor)) {\n          toggleVisualBlocks(editor, pluginUrl, enabledState);\n        }\n      });\n    };\n\n    var toggleActiveState = function (editor, enabledState) {\n      return function (api) {\n        api.setActive(enabledState.get());\n        var editorEventCallback = function (e) {\n          return api.setActive(e.state);\n        };\n        editor.on('VisualBlocks', editorEventCallback);\n        return function () {\n          return editor.off('VisualBlocks', editorEventCallback);\n        };\n      };\n    };\n    var register = function (editor, enabledState) {\n      var onAction = function () {\n        return editor.execCommand('mceVisualBlocks');\n      };\n      editor.ui.registry.addToggleButton('visualblocks', {\n        icon: 'visualblocks',\n        tooltip: 'Show blocks',\n        onAction: onAction,\n        onSetup: toggleActiveState(editor, enabledState)\n      });\n      editor.ui.registry.addToggleMenuItem('visualblocks', {\n        text: 'Show blocks',\n        icon: 'visualblocks',\n        onAction: onAction,\n        onSetup: toggleActiveState(editor, enabledState)\n      });\n    };\n\n    function Plugin () {\n      global.add('visualblocks', function (editor, pluginUrl) {\n        var enabledState = Cell(false);\n        register$1(editor, pluginUrl, enabledState);\n        register(editor, enabledState);\n        setup(editor, pluginUrl, enabledState);\n      });\n    }\n\n    Plugin();\n\n}());\n"],"names":["global","tinymce","util","Tools","resolve","toggleVisualBlocks","editor","pluginUrl","enabledState","dom","toggleClass","getBody","set","get","state","fire","fireVisualBlocks","toggleActiveState","api","setActive","editorEventCallback","e","on","off","add","value","v","addCommand","register$1","onAction","execCommand","ui","registry","addToggleButton","icon","tooltip","onSetup","addToggleMenuItem","text","register","type","getParam","isEnabledByDefault","setup"],"sourceRoot":""}