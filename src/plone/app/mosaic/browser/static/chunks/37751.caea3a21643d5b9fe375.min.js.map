{"version":3,"file":"chunks/37751.caea3a21643d5b9fe375.min.js","mappings":"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","sources":["webpack://plone-mosaic/./resources/js/mosaic.actions.js"],"sourcesContent":["// This plugin is used to register and execute actions.\nimport $ from \"jquery\";\nimport logging from \"@patternslib/patternslib/src/core/logging\";\nimport mosaic_utils from \"./utils\";\nimport Modal from \"@plone/mockup/src/pat/modal/modal\";\nimport utils from \"@plone/mockup/src/core/utils\";\n\nconst log = logging.getLogger(\"pat-mosaic/actions\");\n\nclass ActionManager {\n    constructor(mosaic) {\n        this.mosaic = mosaic;\n        this.actions = []; // Array with all the actions\n        this.shortcuts = []; // Lookup array for shortcuts\n    }\n\n    registerAction(name, options) {\n        // Extend default settings\n        options = {\n            // Handler for executing the action\n            exec: function () { },\n\n            // Shortcut can be any key + ctrl/shift/alt or a combination of\n            // those\n            shortcut: {\n                ctrl: false,\n                alt: false,\n                shift: false,\n                key: \"\",\n            },\n\n            // Method to see if the actions should be visible based on the\n            // current tile state\n            visible: function () {\n                return true;\n            },\n\n            ...options,\n        };\n\n        // Add action to manager\n        this.actions[name] = options;\n\n        // Check if shortcut is defined\n        if (options.shortcut.key !== \"\") {\n            // Set keyCode and charCode\n            options.shortcut.charCode = options.shortcut.key.toUpperCase().charCodeAt(0);\n            options.shortcut.action = name;\n\n            // Set shortcut\n            this.shortcuts.push(options.shortcut);\n        }\n    }\n\n    execAction(action, source) {\n        if (!(action in this.actions)) {\n            log.error(`Action ${action} not in \"${this.actions}\"`);\n            return;\n        }\n        log.debug(`Executing action \"${action}\" ↓`, this.actions[action]);\n        log.debug(`from source ↓`, source);\n        return this.actions[action].exec(source);\n    }\n\n    getPrefixedClassName(name) {\n        if (name.indexOf(\"-\") > -1) {\n            // dash-spaced-class-name\n            return \"mosaic-\" + name;\n        } else {\n            // camelCaseClassName\n            return \"mosaic\" + name.charAt(0).toUpperCase() + name.slice(1);\n        }\n    }\n\n    async initActions() {\n        var self = this;\n        var mosaic = self.mosaic;\n\n        // Register generic reusable toggle tile class format action\n        self.registerAction(\"tile-toggle-class\", {\n            exec: function () {\n                var name;\n                if (arguments.length > 0 && arguments[0].value) {\n                    name = self.getPrefixedClassName(arguments[0].value);\n                    $(\".mosaic-selected-tile\", mosaic.document).toggleClass(name);\n                }\n            },\n        });\n\n        // Register generic reusable toggle tile class format action\n        self.registerAction(\"tile-remove-format\", {\n            exec: function () {\n                var i, j, group, action, name;\n                for (i = 0; i < mosaic.options.formats.length; i++) {\n                    group = mosaic.options.formats[i];\n                    for (j = 0; j < group.actions.length; j++) {\n                        action = group.actions[j];\n                        if (action.category === \"tile\") {\n                            name = self.getPrefixedClassName(action.name);\n                            $(\".mosaic-selected-tile\", mosaic.document).removeClass(\n                                name,\n                            );\n                        }\n                    }\n                }\n            },\n        });\n\n        // Register generic reusable toggle row class format action\n        self.registerAction(\"row-toggle-class\", {\n            exec: function () {\n                var name;\n                if (arguments.length > 0 && arguments[0].value) {\n                    name = self.getPrefixedClassName(arguments[0].value);\n                    $(\".mosaic-selected-tile\", mosaic.document)\n                        .parents(\".mosaic-grid-row\")\n                        .first()\n                        .toggleClass(name);\n                }\n            },\n        });\n\n        // Register generic reusable toggle row class format action\n        self.registerAction(\"row-remove-format\", {\n            exec: function () {\n                var i, j, group, action, name;\n                for (i = 0; i < mosaic.options.formats.length; i++) {\n                    group = mosaic.options.formats[i];\n                    for (j = 0; j < group.actions.length; j++) {\n                        action = group.actions[j];\n                        if (action.category === \"row\") {\n                            name = self.getPrefixedClassName(action.name);\n                            $(\".mosaic-selected-tile\", mosaic.document)\n                                .parents(\".mosaic-grid-row\")\n                                .first()\n                                .removeClass(name)\n                                .removeClass(action.name);\n                        }\n                    }\n                }\n            },\n        });\n\n        // Register tile align block action\n        self.registerAction(\"tile-align-block\", {\n            exec: function () {\n                // Remove left and right align classes\n                $(\".mosaic-selected-tile\", mosaic.document)\n                    .removeClass(\"mosaic-tile-align-right\")\n                    .removeClass(\"mosaic-tile-align-left\");\n            },\n            shortcut: {\n                ctrl: true,\n                alt: false,\n                shift: true,\n                key: \"b\",\n            },\n        });\n\n        // Register tile align left action\n        self.registerAction(\"tile-align-left\", {\n            exec: function () {\n                // Remove right align class, add left align class\n                $(\".mosaic-selected-tile\", mosaic.document)\n                    .removeClass(\"mosaic-tile-align-right\")\n                    .addClass(\"mosaic-tile-align-left\");\n            },\n            shortcut: {\n                ctrl: true,\n                alt: false,\n                shift: true,\n                key: \"l\",\n            },\n        });\n\n        // Register tile align right action\n        self.registerAction(\"tile-align-right\", {\n            exec: function () {\n                // Remove left align class, add right align class\n                $(\".mosaic-selected-tile\", mosaic.document)\n                    .removeClass(\"mosaic-tile-align-left\")\n                    .addClass(\"mosaic-tile-align-right\");\n            },\n            shortcut: {\n                ctrl: true,\n                alt: false,\n                shift: true,\n                key: \"r\",\n            },\n        });\n\n        // Register save action\n        self.registerAction(\"save\", {\n            exec: function (source) {\n                if(mosaic.saving_tile) {\n                    // defer saving until all tiles are saved\n                    log.debug(\"Wait for saving tiles\");\n                    window.setTimeout(() => {self.execAction(\"save\", source)}, 500);\n                    return;\n                }\n                mosaic.saving = true;\n                self.blurSelectedTile();\n                mosaic.toolbar.SelectedTileChange();\n                mosaic.layoutManager.saveLayoutToForm();\n                mosaic.save();\n                mosaic.saving = false;\n            },\n            shortcut: {\n                ctrl: true,\n                alt: false,\n                shift: false,\n                key: \"s\",\n            },\n        });\n\n        // Register cancel action\n        self.registerAction(\"cancel\", {\n            exec: function () {\n                // Cancel form\n                $(\"#form-buttons-cancel\").trigger(\"click\");\n            },\n        });\n\n        // Register preview action\n        self.registerAction(\"preview\", {\n            exec: function () {\n                // Trigger validation => drafting sync\n                $(\n                    \"#form-widgets-ILayoutAware-customContentLayout, \" +\n                    \"[name='form.widgets.ILayoutAware.customContentLayout']\",\n                )\n                    .trigger(\"focus\")\n                    .trigger(\"focusout\");\n\n                // Layout preview\n                setTimeout(function () {\n                    window.open(\n                        mosaic.options.context_url + \"/@@layout_preview\",\n                        \"_blank\",\n                    );\n                }, 1000);\n            },\n        });\n\n        // Register html action\n        self.registerAction(\"html\", {\n            exec: function () {\n                // Local variables\n                var tilecontent, text, height;\n\n                // Get tile content div\n                tilecontent = $(\".mosaic-selected-tile\", mosaic.document).children(\n                    \".mosaic-tile-content\",\n                );\n\n                // Check if not already html editable\n                if (tilecontent.find(\".mosaic-rich-text-textarea\").length === 0) {\n                    // Add new text area and set content\n                    text = tilecontent.html();\n                    height = tilecontent.height();\n                    tilecontent.empty();\n                    tilecontent.prepend(\n                        $(mosaic.document.createElement(\"textarea\"))\n                            .addClass(\"mosaic-rich-text-textarea\")\n                            .html(text.trim())\n                            .height(height),\n                    );\n                }\n            },\n        });\n\n        // Register page properties action\n        self.registerAction(\"properties\", {\n            exec: function () {\n                mosaic.overlay.open(\"all\");\n            },\n        });\n\n        self.registerAction(\"layout\", {\n            /* layout drop down */\n            exec: function () {\n                var $container = $(\".mosaic-button-group-layout\");\n                $container.toggleClass(\"active\");\n            },\n            visible: function () {\n                return true;\n            },\n        });\n\n        // register customize layout button\n        self.registerAction(\"customizelayout\", {\n            exec: function () {\n                mosaic.setSelectedContentLayout(\"\"); // clear selected layout, will use stored layout then\n                $(\".mosaic-toolbar-secondary-functions\").removeClass(\"d-none\");\n                $(\".mosaic-button-customizelayout\").hide();\n                $(\".mosaic-button-savelayout\").show();\n                // go through each tile and add movable\n                $(\".mosaic-panel .mosaic-tile\", mosaic.document).each(function () {\n                    var $mosaic_tile = $(this).data(\"mosaic-tile\");\n                    $mosaic_tile.makeMovable();\n                    $mosaic_tile.$el.mosaicAddDrag();\n                });\n                $(\".mosaic-button-group-layout\").removeClass(\"active\");\n            },\n            visible: function () {\n                return mosaic.hasContentLayout && mosaic.options.canChangeLayout;\n            },\n        });\n\n        // register change layout button\n        self.registerAction(\"changelayout\", {\n            exec: function () {\n                var yes = mosaic.hasContentLayout;\n                if (!yes) {\n                    yes = confirm(\n                        \"Changing your layout will destroy all existing custom layout \" +\n                        \"settings you have in place. Are you sure you want to continue?\",\n                    );\n                }\n                if (yes) {\n                    mosaic.selectLayout();\n                }\n                $(\".mosaic-button-group-layout\").removeClass(\"active\");\n            },\n            visible: function () {\n                return mosaic.options.available_layouts.length > 0;\n            },\n        });\n\n        // register change layout button\n        self.registerAction(\"savelayout\", {\n            exec: function () {\n                mosaic.saveLayout();\n                $(\".mosaic-button-group-layout\").removeClass(\"active\");\n            },\n            visible: function () {\n                return true;\n            },\n        });\n\n        // Register add tile action\n        self.registerAction(\"add-tile\", {\n            exec: function () {\n                // Open overlay\n                var m = new Modal(\".mosaic-toolbar\", {\n                    modalSizeClass: \"modal-lg\",\n                    ajaxUrl:\n                        mosaic.options.context_url +\n                        \"/@@add-tile?form.button.Create=Create\",\n                    backdropOptions: {\n                        closeOnClick: false,\n                    },\n                });\n                m.show();\n            },\n        });\n\n        // Register format action\n        self.registerAction(\"format\", {\n            exec: function (source) {\n                var val = $(source).val();\n                var action = $(source).find(`[value=\"${val}\"]`).data(\"action\");\n                self.execAction(action, source);\n                // reset selector\n                $(source).select2(\"val\", \"none\");\n            },\n        });\n\n        // Register page-insert action\n        self.registerAction(\"insert\", {\n            exec: async function (source) {\n                // Local variables\n                var tile_config, tile_type;\n\n                // Check if value selected\n                if ($(source).val() === \"none\") {\n                    return false;\n                } else {\n                    tile_type = $(source).val();\n                }\n\n                // Deselect tiles\n                self.blurSelectedTile();\n\n                // Set actions\n                mosaic.toolbar.SelectedTileChange();\n\n                // Get tile config\n                for (const tile_group of mosaic.options.tiles) {\n                    for (const tile of tile_group.tiles) {\n                        if (tile.name === tile_type) {\n                            tile_config = tile;\n                        }\n                    }\n                }\n\n                // Create new app tile\n                if (tile_config.tile_type === \"textapp\") {\n                    // an app tile\n                    var uid = mosaic_utils.generate_uid();\n                    var tileUrl =\n                        mosaic.options.context_url + \"/@@\" + tile_type + \"/\" + uid;\n                    var html =\n                        \"<html><body>\" +\n                        mosaic.layoutManager.getDefaultValue(tile_config) +\n                        \"</body></html>\";\n                    mosaic.layoutManager.addAppTileHTML(tile_type, html, tileUrl);\n                } else if (tile_config.tile_type === \"app\") {\n                    // Load add form form selected tiletype\n                    utils.loading.show();\n\n                    const openAddFormInModal = function (html) {\n                        let initial = true;\n                        const m = new Modal(self.mosaic.panels[0], {\n                            html: html,\n                            modalSizeClass: \"modal-lg\",\n                            position: \"center top\",\n                            buttons:\n                                '.formControls > button[type=\"submit\"], .actionButtons > button[type=\"submit\"]',\n                            backdropOptions: {\n                                closeOnClick: false,\n                            },\n                        });\n                        m.on(\"after-render\", () => {\n                            // Remove field errors since the user has not actually\n                            // been able to fill out the form yet\n                            var $mContent = m.$modalContent;\n                            if (initial) {\n                                $(\".field.error\", $mContent).removeClass(\"error\");\n                                $(\n                                    \".fieldErrorBox,.portalMessage,.alert,.invalid-feedback\",\n                                    $mContent,\n                                ).remove();\n                            }\n                            $('button[name*=\"cancel\"]', $mContent)\n                                .off(\"click\")\n                                .on(\"click\", function () {\n                                    m.hide();\n                                });\n                            log.debug(\"after-render\");\n                        });\n                        m.on(\"formActionSuccess\", (event, response, state, xhr) => {\n                            log.debug(\"TileAddForm ActionSuccess\");\n                            var tileUrl = xhr.getResponseHeader(\"X-Tile-Url\");\n                            if (tileUrl && initial) {\n                                mosaic.layoutManager.addAppTileHTML(\n                                    tile_type,\n                                    response,\n                                    tileUrl,\n                                );\n                                initial = false;\n                            }\n                            m.hide();\n                        });\n                        m.show();\n                    };\n\n                    fetch(\n                        `${mosaic.options.context_url}/@@add-tile?tiletype=${tile_type}&form.button.Create=Create`,\n                        {\n                            method: \"GET\",\n                        })\n                        .then(response => {\n                            if (!response.ok) {\n                                alert(`Could not create tile ${tile_type}: ${response.statusText}`);\n                                return;\n                            }\n                            return response.text();\n                        })\n                        .then(value => {\n                            utils.loading.hide();\n\n                            // Read form\n                            const $value = $(value);\n                            let action_url = $value.find(\"#add_tile\").attr(\"action\");\n                            const authenticator = $value\n                                .find('[name=\"_authenticator\"]')\n                                .val();\n\n                            // Auto-submit add-form when all required fields are filled\n                            if (\n                                $(\"form .required\", $value).filter(function () {\n                                    var val = $(this)\n                                        .parents(\".field\")\n                                        .first()\n                                        .find(\"input, select, textarea\")\n                                        .not('[type=\"hidden\"]')\n                                        .last()\n                                        .val();\n                                    return val === null || val.length === 0;\n                                }).length > 0\n                            ) {\n                                openAddFormInModal(value);\n                            } else if (action_url) {\n                                $(\"form\", $value).ajaxSubmit({\n                                    type: \"POST\",\n                                    url: action_url,\n                                    data: {\n                                        \"buttons.save\": \"Save\",\n                                        \"_authenticator\": authenticator,\n                                    },\n                                    success: function (value, state, xhr) {\n                                        var tileUrl =\n                                            xhr.getResponseHeader(\"X-Tile-Url\");\n                                        if (tileUrl) {\n                                            mosaic.layoutManager.addAppTileHTML(\n                                                tile_type,\n                                                value,\n                                                tileUrl,\n                                            );\n                                        } else {\n                                            openAddFormInModal(value);\n                                        }\n                                    },\n                                });\n                            }\n                        });\n                } else {\n                    // Add tile\n                    await mosaic.layoutManager.addTile(\n                        tile_type,\n                        mosaic.layoutManager.getDefaultValue(tile_config),\n                    );\n                }\n\n                // reset menu\n                $(source).select2(\"val\", \"none\");\n\n                // Normal exit\n                return true;\n            },\n        });\n\n        // Handle keypress event, check for shortcuts\n        $(document).on(\"keypress\", function (e) {\n            // Action name\n            var action = \"\";\n\n            // Loop through shortcuts\n            $(mosaic.actionManager.shortcuts).each(function () {\n                // Check if shortcut matched\n                if (\n                    (e.ctrlKey === this.ctrl ||\n                        (navigator.userAgent.toLowerCase().indexOf(\"macintosh\") !== -1 &&\n                            e.metaKey === this.ctrl)) &&\n                    (e.altKey === this.alt || e.altKey === undefined) &&\n                    e.shiftKey === this.shift &&\n                    e.key.toUpperCase().charCodeAt(0) === this.charCode\n                ) {\n                    // Found action\n                    action = this.action;\n                }\n            });\n\n            // Check if shortcut found\n            if (action !== \"\") {\n                // Exec actions\n                mosaic.actionManager.actions[action].exec();\n\n                // Prevent other actions\n                return false;\n            }\n\n            // Normal exit\n            return true;\n        });\n    }\n\n    blurSelectedTile() {\n        const selTile = this.mosaic.document.querySelectorAll(\".mosaic-selected-tile\");\n        if (!selTile.length) return;\n        log.debug(\"blur selected tile(s) ↓\", selTile);\n        selTile.forEach(async el => await el[\"mosaic-tile\"].blur());\n    }\n\n    mosaicExecAction() {\n        // Loop through matched elements\n        return this.each(function () {\n            // Check if actions specified\n            if ($(this).data(\"action\") !== \"\") {\n                var mgr = $.mosaic.actionManager;\n\n                // Exec actions\n                mgr.actions[$(this).data(\"action\")].exec(this);\n            }\n        });\n    }\n}\n\nexport default ActionManager;\n"],"names":["log","logging","getLogger","constructor","mosaic","this","actions","shortcuts","registerAction","name","options","exec","shortcut","ctrl","alt","shift","key","visible","charCode","toUpperCase","charCodeAt","action","push","execAction","source","debug","error","getPrefixedClassName","indexOf","charAt","slice","initActions","self","arguments","length","value","$","document","toggleClass","i","j","group","formats","category","removeClass","parents","first","addClass","saving_tile","window","setTimeout","saving","blurSelectedTile","toolbar","SelectedTileChange","layoutManager","saveLayoutToForm","save","trigger","open","context_url","tilecontent","text","height","children","find","html","empty","prepend","createElement","trim","overlay","setSelectedContentLayout","hide","show","each","$mosaic_tile","data","makeMovable","$el","mosaicAddDrag","hasContentLayout","canChangeLayout","yes","confirm","selectLayout","available_layouts","saveLayout","Modal","modalSizeClass","ajaxUrl","backdropOptions","closeOnClick","val","select2","async","tile_config","tile_type","tile_group","tiles","tile","uid","mosaic_utils","generate_uid","tileUrl","getDefaultValue","addAppTileHTML","utils","loading","openAddFormInModal","initial","m","panels","position","buttons","on","$mContent","$modalContent","remove","off","event","response","state","xhr","getResponseHeader","fetch","method","then","ok","alert","statusText","$value","action_url","attr","authenticator","filter","not","last","ajaxSubmit","type","url","success","addTile","e","actionManager","ctrlKey","navigator","userAgent","toLowerCase","metaKey","altKey","undefined","shiftKey","selTile","querySelectorAll","forEach","el","blur","mosaicExecAction"],"sourceRoot":""}