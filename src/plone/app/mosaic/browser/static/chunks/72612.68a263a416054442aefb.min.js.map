{"version":3,"file":"chunks/72612.68a263a416054442aefb.min.js","mappings":"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","sources":["webpack://plone-mosaic/./node_modules/tinymce/plugins/autosave/plugin.js"],"sourcesContent":["/**\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\n * Licensed under the LGPL or a commercial license.\n * For LGPL see License.txt in the project root for license information.\n * For commercial licenses see https://www.tiny.cloud/\n *\n * Version: 5.10.7 (2022-12-06)\n */\n(function () {\n    'use strict';\n\n    var global$4 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var eq = function (t) {\n      return function (a) {\n        return t === a;\n      };\n    };\n    var isUndefined = eq(undefined);\n\n    var global$3 = tinymce.util.Tools.resolve('tinymce.util.Delay');\n\n    var global$2 = tinymce.util.Tools.resolve('tinymce.util.LocalStorage');\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    var fireRestoreDraft = function (editor) {\n      return editor.fire('RestoreDraft');\n    };\n    var fireStoreDraft = function (editor) {\n      return editor.fire('StoreDraft');\n    };\n    var fireRemoveDraft = function (editor) {\n      return editor.fire('RemoveDraft');\n    };\n\n    var parse = function (timeString, defaultTime) {\n      var multiples = {\n        s: 1000,\n        m: 60000\n      };\n      var toParse = timeString || defaultTime;\n      var parsedTime = /^(\\d+)([ms]?)$/.exec('' + toParse);\n      return (parsedTime[2] ? multiples[parsedTime[2]] : 1) * parseInt(toParse, 10);\n    };\n\n    var shouldAskBeforeUnload = function (editor) {\n      return editor.getParam('autosave_ask_before_unload', true);\n    };\n    var getAutoSavePrefix = function (editor) {\n      var location = document.location;\n      return editor.getParam('autosave_prefix', 'tinymce-autosave-{path}{query}{hash}-{id}-').replace(/{path}/g, location.pathname).replace(/{query}/g, location.search).replace(/{hash}/g, location.hash).replace(/{id}/g, editor.id);\n    };\n    var shouldRestoreWhenEmpty = function (editor) {\n      return editor.getParam('autosave_restore_when_empty', false);\n    };\n    var getAutoSaveInterval = function (editor) {\n      return parse(editor.getParam('autosave_interval'), '30s');\n    };\n    var getAutoSaveRetention = function (editor) {\n      return parse(editor.getParam('autosave_retention'), '20m');\n    };\n\n    var isEmpty = function (editor, html) {\n      if (isUndefined(html)) {\n        return editor.dom.isEmpty(editor.getBody());\n      } else {\n        var trimmedHtml = global$1.trim(html);\n        if (trimmedHtml === '') {\n          return true;\n        } else {\n          var fragment = new DOMParser().parseFromString(trimmedHtml, 'text/html');\n          return editor.dom.isEmpty(fragment);\n        }\n      }\n    };\n    var hasDraft = function (editor) {\n      var time = parseInt(global$2.getItem(getAutoSavePrefix(editor) + 'time'), 10) || 0;\n      if (new Date().getTime() - time > getAutoSaveRetention(editor)) {\n        removeDraft(editor, false);\n        return false;\n      }\n      return true;\n    };\n    var removeDraft = function (editor, fire) {\n      var prefix = getAutoSavePrefix(editor);\n      global$2.removeItem(prefix + 'draft');\n      global$2.removeItem(prefix + 'time');\n      if (fire !== false) {\n        fireRemoveDraft(editor);\n      }\n    };\n    var storeDraft = function (editor) {\n      var prefix = getAutoSavePrefix(editor);\n      if (!isEmpty(editor) && editor.isDirty()) {\n        global$2.setItem(prefix + 'draft', editor.getContent({\n          format: 'raw',\n          no_events: true\n        }));\n        global$2.setItem(prefix + 'time', new Date().getTime().toString());\n        fireStoreDraft(editor);\n      }\n    };\n    var restoreDraft = function (editor) {\n      var prefix = getAutoSavePrefix(editor);\n      if (hasDraft(editor)) {\n        editor.setContent(global$2.getItem(prefix + 'draft'), { format: 'raw' });\n        fireRestoreDraft(editor);\n      }\n    };\n    var startStoreDraft = function (editor) {\n      var interval = getAutoSaveInterval(editor);\n      global$3.setEditorInterval(editor, function () {\n        storeDraft(editor);\n      }, interval);\n    };\n    var restoreLastDraft = function (editor) {\n      editor.undoManager.transact(function () {\n        restoreDraft(editor);\n        removeDraft(editor);\n      });\n      editor.focus();\n    };\n\n    var get = function (editor) {\n      return {\n        hasDraft: function () {\n          return hasDraft(editor);\n        },\n        storeDraft: function () {\n          return storeDraft(editor);\n        },\n        restoreDraft: function () {\n          return restoreDraft(editor);\n        },\n        removeDraft: function (fire) {\n          return removeDraft(editor, fire);\n        },\n        isEmpty: function (html) {\n          return isEmpty(editor, html);\n        }\n      };\n    };\n\n    var global = tinymce.util.Tools.resolve('tinymce.EditorManager');\n\n    var setup = function (editor) {\n      editor.editorManager.on('BeforeUnload', function (e) {\n        var msg;\n        global$1.each(global.get(), function (editor) {\n          if (editor.plugins.autosave) {\n            editor.plugins.autosave.storeDraft();\n          }\n          if (!msg && editor.isDirty() && shouldAskBeforeUnload(editor)) {\n            msg = editor.translate('You have unsaved changes are you sure you want to navigate away?');\n          }\n        });\n        if (msg) {\n          e.preventDefault();\n          e.returnValue = msg;\n        }\n      });\n    };\n\n    var makeSetupHandler = function (editor) {\n      return function (api) {\n        api.setDisabled(!hasDraft(editor));\n        var editorEventCallback = function () {\n          return api.setDisabled(!hasDraft(editor));\n        };\n        editor.on('StoreDraft RestoreDraft RemoveDraft', editorEventCallback);\n        return function () {\n          return editor.off('StoreDraft RestoreDraft RemoveDraft', editorEventCallback);\n        };\n      };\n    };\n    var register = function (editor) {\n      startStoreDraft(editor);\n      editor.ui.registry.addButton('restoredraft', {\n        tooltip: 'Restore last draft',\n        icon: 'restore-draft',\n        onAction: function () {\n          restoreLastDraft(editor);\n        },\n        onSetup: makeSetupHandler(editor)\n      });\n      editor.ui.registry.addMenuItem('restoredraft', {\n        text: 'Restore last draft',\n        icon: 'restore-draft',\n        onAction: function () {\n          restoreLastDraft(editor);\n        },\n        onSetup: makeSetupHandler(editor)\n      });\n    };\n\n    function Plugin () {\n      global$4.add('autosave', function (editor) {\n        setup(editor);\n        register(editor);\n        editor.on('init', function () {\n          if (shouldRestoreWhenEmpty(editor) && editor.dom.isEmpty(editor.getBody())) {\n            restoreDraft(editor);\n          }\n        });\n        return get(editor);\n      });\n    }\n\n    Plugin();\n\n}());\n"],"names":["t","global$4","tinymce","util","Tools","resolve","isUndefined","undefined","a","global$3","global$2","global$1","parse","timeString","defaultTime","toParse","parsedTime","exec","s","m","parseInt","getAutoSavePrefix","editor","location","document","getParam","replace","pathname","search","hash","id","isEmpty","html","dom","getBody","trimmedHtml","trim","fragment","DOMParser","parseFromString","hasDraft","time","getItem","Date","getTime","getAutoSaveRetention","removeDraft","fire","prefix","removeItem","fireRemoveDraft","storeDraft","isDirty","setItem","getContent","format","no_events","toString","fireStoreDraft","restoreDraft","setContent","fireRestoreDraft","startStoreDraft","interval","getAutoSaveInterval","setEditorInterval","restoreLastDraft","undoManager","transact","focus","global","makeSetupHandler","api","setDisabled","editorEventCallback","on","off","add","editorManager","e","msg","each","get","plugins","autosave","shouldAskBeforeUnload","translate","preventDefault","returnValue","setup","ui","registry","addButton","tooltip","icon","onAction","onSetup","addMenuItem","text","register","shouldRestoreWhenEmpty"],"sourceRoot":""}