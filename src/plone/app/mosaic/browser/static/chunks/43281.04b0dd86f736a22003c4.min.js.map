{"version":3,"file":"chunks/43281.04b0dd86f736a22003c4.min.js","mappings":"mGAQC,WACG,aAEA,IAAIA,EAAWC,QAAQC,KAAKC,MAAMC,QAAQ,yBAEtCC,EAAWJ,QAAQC,KAAKC,MAAMC,QAAQ,wBAEtCE,EAASL,QAAQC,KAAKC,MAAMC,QAAQ,sBAEpCG,EAAkB,SAAUC,GAC9B,OAAOA,EAAOC,SAAS,wBAAwB,EACjD,EAQIC,EAAsB,SAAUF,EAAQG,GAC1CH,EAAOI,oBAAoBC,KAAK,CAC9BC,KAAMH,EACNI,KAAM,SAEV,EAmCIC,EAAa,SAAUR,GACzBA,EAAOS,WAAW,WAAW,YAnCpB,SAAUT,GACnB,IAAIU,EAAUb,EAASc,IAAIC,UAAUZ,EAAOa,GAAI,QAChD,IAAId,EAAgBC,IAAYA,EAAOc,UAAvC,CAIA,GADAd,EAAOe,OAlBe,SAAUf,GAChC,QAASA,EAAOC,SAAS,sBAC3B,CAiBMe,CAAkBhB,GAGpB,OAFAA,EAAOiB,aAAa,sBAAuBjB,QAC3CA,EAAOkB,cAGLR,GACFV,EAAOmB,UAAS,GACXT,EAAQU,WAAYV,EAAQU,aACD,mBAAnBV,EAAQW,OACjBX,EAAQW,SAERnB,EAAoBF,EAAQ,wCAGhCA,EAAOkB,eAEPhB,EAAoBF,EAAQ,gCAlB9B,CAoBF,CAYIe,CAAKf,EACP,IACAA,EAAOS,WAAW,aAAa,YAbpB,SAAUT,GACrB,IAAIsB,EAAIxB,EAAOyB,KAAKvB,EAAOwB,eApCH,SAAUxB,GAClC,QAASA,EAAOC,SAAS,wBAC3B,CAmCMwB,CAAoBzB,GAIxBA,EAAO0B,aAAaJ,GAHlBtB,EAAOiB,aAAa,wBAAyBjB,EAIjD,CAOI2B,CAAO3B,EACT,GACF,EAEI4B,EAAc,SAAU5B,GAC1B,OAAO,SAAU6B,GACf,IAAIC,EAAU,WACZD,EAAIE,YAAYhC,EAAgBC,KAAYA,EAAOc,UACrD,EAGA,OAFAgB,IACA9B,EAAOgC,GAAG,mBAAoBF,GACvB,WACL,OAAO9B,EAAOiC,IAAI,mBAAoBH,EACxC,CACF,CACF,EAwBEtC,EAAS0C,IAAI,QAAQ,SAAUlC,IAvBlB,SAAUA,GACvBA,EAAOmC,GAAGC,SAASC,UAAU,OAAQ,CACnCC,KAAM,OACNC,QAAS,OACTC,UAAU,EACVC,SAAU,WACR,OAAOzC,EAAO0C,YAAY,UAC5B,EACAC,QAASf,EAAY5B,KAEvBA,EAAOmC,GAAGC,SAASC,UAAU,SAAU,CACrCC,KAAM,SACNC,QAAS,SACTC,UAAU,EACVC,SAAU,WACR,OAAOzC,EAAO0C,YAAY,YAC5B,EACAC,QAASf,EAAY5B,KAEvBA,EAAO4C,YAAY,SAAU,GAAI,UACnC,CAIIC,CAAS7C,GACTQ,EAAWR,EACb,GAKN,CA/GA,E","sources":["webpack://plone-mosaic/./node_modules/tinymce/plugins/save/plugin.js"],"sourcesContent":["/**\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\n * Licensed under the LGPL or a commercial license.\n * For LGPL see License.txt in the project root for license information.\n * For commercial licenses see https://www.tiny.cloud/\n *\n * Version: 5.10.7 (2022-12-06)\n */\n(function () {\n    'use strict';\n\n    var global$2 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.dom.DOMUtils');\n\n    var global = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    var enableWhenDirty = function (editor) {\n      return editor.getParam('save_enablewhendirty', true);\n    };\n    var hasOnSaveCallback = function (editor) {\n      return !!editor.getParam('save_onsavecallback');\n    };\n    var hasOnCancelCallback = function (editor) {\n      return !!editor.getParam('save_oncancelcallback');\n    };\n\n    var displayErrorMessage = function (editor, message) {\n      editor.notificationManager.open({\n        text: message,\n        type: 'error'\n      });\n    };\n    var save = function (editor) {\n      var formObj = global$1.DOM.getParent(editor.id, 'form');\n      if (enableWhenDirty(editor) && !editor.isDirty()) {\n        return;\n      }\n      editor.save();\n      if (hasOnSaveCallback(editor)) {\n        editor.execCallback('save_onsavecallback', editor);\n        editor.nodeChanged();\n        return;\n      }\n      if (formObj) {\n        editor.setDirty(false);\n        if (!formObj.onsubmit || formObj.onsubmit()) {\n          if (typeof formObj.submit === 'function') {\n            formObj.submit();\n          } else {\n            displayErrorMessage(editor, 'Error: Form submit field collision.');\n          }\n        }\n        editor.nodeChanged();\n      } else {\n        displayErrorMessage(editor, 'Error: No form element found.');\n      }\n    };\n    var cancel = function (editor) {\n      var h = global.trim(editor.startContent);\n      if (hasOnCancelCallback(editor)) {\n        editor.execCallback('save_oncancelcallback', editor);\n        return;\n      }\n      editor.resetContent(h);\n    };\n\n    var register$1 = function (editor) {\n      editor.addCommand('mceSave', function () {\n        save(editor);\n      });\n      editor.addCommand('mceCancel', function () {\n        cancel(editor);\n      });\n    };\n\n    var stateToggle = function (editor) {\n      return function (api) {\n        var handler = function () {\n          api.setDisabled(enableWhenDirty(editor) && !editor.isDirty());\n        };\n        handler();\n        editor.on('NodeChange dirty', handler);\n        return function () {\n          return editor.off('NodeChange dirty', handler);\n        };\n      };\n    };\n    var register = function (editor) {\n      editor.ui.registry.addButton('save', {\n        icon: 'save',\n        tooltip: 'Save',\n        disabled: true,\n        onAction: function () {\n          return editor.execCommand('mceSave');\n        },\n        onSetup: stateToggle(editor)\n      });\n      editor.ui.registry.addButton('cancel', {\n        icon: 'cancel',\n        tooltip: 'Cancel',\n        disabled: true,\n        onAction: function () {\n          return editor.execCommand('mceCancel');\n        },\n        onSetup: stateToggle(editor)\n      });\n      editor.addShortcut('Meta+S', '', 'mceSave');\n    };\n\n    function Plugin () {\n      global$2.add('save', function (editor) {\n        register(editor);\n        register$1(editor);\n      });\n    }\n\n    Plugin();\n\n}());\n"],"names":["global$2","tinymce","util","Tools","resolve","global$1","global","enableWhenDirty","editor","getParam","displayErrorMessage","message","notificationManager","open","text","type","register$1","addCommand","formObj","DOM","getParent","id","isDirty","save","hasOnSaveCallback","execCallback","nodeChanged","setDirty","onsubmit","submit","h","trim","startContent","hasOnCancelCallback","resetContent","cancel","stateToggle","api","handler","setDisabled","on","off","add","ui","registry","addButton","icon","tooltip","disabled","onAction","execCommand","onSetup","addShortcut","register"],"sourceRoot":""}