{"version":3,"file":"chunks/37751.25c29b8d01307433dcec.min.js","mappings":"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","sources":["webpack://plone-mosaic/./resources/js/mosaic.actions.js"],"sourcesContent":["// This plugin is used to register and execute actions.\nimport $ from \"jquery\";\nimport logging from \"@patternslib/patternslib/src/core/logging\";\nimport mosaic_utils from \"./utils\";\nimport Modal from \"@plone/mockup/src/pat/modal/modal\";\nimport utils from \"@plone/mockup/src/core/utils\";\n\nconst log = logging.getLogger(\"pat-mosaic/actions\");\n\nclass ActionManager {\n    constructor(mosaic) {\n        this.mosaic = mosaic;\n        this.actions = []; // Array with all the actions\n        this.shortcuts = []; // Lookup array for shortcuts\n    }\n\n    registerAction(name, options) {\n        // Extend default settings\n        options = {\n            // Handler for executing the action\n            exec: function () { },\n\n            // Shortcut can be any key + ctrl/shift/alt or a combination of\n            // those\n            shortcut: {\n                ctrl: false,\n                alt: false,\n                shift: false,\n                key: \"\",\n            },\n\n            // Method to see if the actions should be visible based on the\n            // current tile state\n            visible: function () {\n                return true;\n            },\n\n            ...options,\n        };\n\n        // Add action to manager\n        this.actions[name] = options;\n\n        // Check if shortcut is defined\n        if (options.shortcut.key !== \"\") {\n            // Set keyCode and charCode\n            options.shortcut.charCode = options.shortcut.key.toUpperCase().charCodeAt(0);\n            options.shortcut.action = name;\n\n            // Set shortcut\n            this.shortcuts.push(options.shortcut);\n        }\n    }\n\n    execAction(action, source) {\n        if (!(action in this.actions)) {\n            log.error(`Action ${action} not in \"${this.actions}\"`);\n            return;\n        }\n        return this.actions[action].exec(source);\n    }\n\n    getPrefixedClassName(name) {\n        if (name.indexOf(\"-\") > -1) {\n            // dash-spaced-class-name\n            return \"mosaic-\" + name;\n        } else {\n            // camelCaseClassName\n            return \"mosaic\" + name.charAt(0).toUpperCase() + name.slice(1);\n        }\n    }\n\n    async initActions() {\n        var self = this;\n        var mosaic = self.mosaic;\n\n        // Register generic reusable toggle tile class format action\n        self.registerAction(\"tile-toggle-class\", {\n            exec: function () {\n                var name;\n                if (arguments.length > 0 && arguments[0].value) {\n                    name = self.getPrefixedClassName(arguments[0].value);\n                    $(\".mosaic-selected-tile\", mosaic.document).toggleClass(name);\n                }\n            },\n        });\n\n        // Register generic reusable toggle tile class format action\n        self.registerAction(\"tile-remove-format\", {\n            exec: function () {\n                var i, j, group, action, name;\n                for (i = 0; i < mosaic.options.formats.length; i++) {\n                    group = mosaic.options.formats[i];\n                    for (j = 0; j < group.actions.length; j++) {\n                        action = group.actions[j];\n                        if (action.category === \"tile\") {\n                            name = self.getPrefixedClassName(action.name);\n                            $(\".mosaic-selected-tile\", mosaic.document).removeClass(\n                                name,\n                            );\n                        }\n                    }\n                }\n            },\n        });\n\n        // Register generic reusable toggle row class format action\n        self.registerAction(\"row-toggle-class\", {\n            exec: function () {\n                var name;\n                if (arguments.length > 0 && arguments[0].value) {\n                    name = self.getPrefixedClassName(arguments[0].value);\n                    $(\".mosaic-selected-tile\", mosaic.document)\n                        .parents(\".mosaic-grid-row\")\n                        .first()\n                        .toggleClass(name);\n                }\n            },\n        });\n\n        // Register generic reusable toggle row class format action\n        self.registerAction(\"row-remove-format\", {\n            exec: function () {\n                var i, j, group, action, name;\n                for (i = 0; i < mosaic.options.formats.length; i++) {\n                    group = mosaic.options.formats[i];\n                    for (j = 0; j < group.actions.length; j++) {\n                        action = group.actions[j];\n                        if (action.category === \"row\") {\n                            name = self.getPrefixedClassName(action.name);\n                            $(\".mosaic-selected-tile\", mosaic.document)\n                                .parents(\".mosaic-grid-row\")\n                                .first()\n                                .removeClass(name)\n                                .removeClass(action.name);\n                        }\n                    }\n                }\n            },\n        });\n\n        // Register tile align block action\n        self.registerAction(\"tile-align-block\", {\n            exec: function () {\n                // Remove left and right align classes\n                $(\".mosaic-selected-tile\", mosaic.document)\n                    .removeClass(\"mosaic-tile-align-right\")\n                    .removeClass(\"mosaic-tile-align-left\");\n            },\n            shortcut: {\n                ctrl: true,\n                alt: false,\n                shift: true,\n                key: \"b\",\n            },\n        });\n\n        // Register tile align left action\n        self.registerAction(\"tile-align-left\", {\n            exec: function () {\n                // Remove right align class, add left align class\n                $(\".mosaic-selected-tile\", mosaic.document)\n                    .removeClass(\"mosaic-tile-align-right\")\n                    .addClass(\"mosaic-tile-align-left\");\n            },\n            shortcut: {\n                ctrl: true,\n                alt: false,\n                shift: true,\n                key: \"l\",\n            },\n        });\n\n        // Register tile align right action\n        self.registerAction(\"tile-align-right\", {\n            exec: function () {\n                // Remove left align class, add right align class\n                $(\".mosaic-selected-tile\", mosaic.document)\n                    .removeClass(\"mosaic-tile-align-left\")\n                    .addClass(\"mosaic-tile-align-right\");\n            },\n            shortcut: {\n                ctrl: true,\n                alt: false,\n                shift: true,\n                key: \"r\",\n            },\n        });\n\n        // Register save action\n        self.registerAction(\"save\", {\n            exec: function () {\n                mosaic.saving = true;\n                self.blurSelectedTile();\n                mosaic.toolbar.SelectedTileChange();\n                mosaic.queue(function (next) {\n                    mosaic.layoutManager.saveLayoutToForm();\n                    mosaic.save();\n                    mosaic.saving = false;\n                    next();\n                });\n            },\n            shortcut: {\n                ctrl: true,\n                alt: false,\n                shift: false,\n                key: \"s\",\n            },\n        });\n\n        // Register cancel action\n        self.registerAction(\"cancel\", {\n            exec: function () {\n                // Cancel form\n                $(\"#form-buttons-cancel\").trigger(\"click\");\n            },\n        });\n\n        // Register preview action\n        self.registerAction(\"preview\", {\n            exec: function () {\n                // Trigger validation => drafting sync\n                $(\n                    \"#form-widgets-ILayoutAware-customContentLayout, \" +\n                    \"[name='form.widgets.ILayoutAware.customContentLayout']\",\n                )\n                    .trigger(\"focus\")\n                    .trigger(\"focusout\");\n\n                // Layout preview\n                setTimeout(function () {\n                    window.open(\n                        mosaic.options.context_url + \"/@@layout_preview\",\n                        \"_blank\",\n                    );\n                }, 1000);\n            },\n        });\n\n        // Register html action\n        self.registerAction(\"html\", {\n            exec: function () {\n                // Local variables\n                var tilecontent, text, height;\n\n                // Get tile content div\n                tilecontent = $(\".mosaic-selected-tile\", mosaic.document).children(\n                    \".mosaic-tile-content\",\n                );\n\n                // Check if not already html editable\n                if (tilecontent.find(\".mosaic-rich-text-textarea\").length === 0) {\n                    // Add new text area and set content\n                    text = tilecontent.html();\n                    height = tilecontent.height();\n                    tilecontent.empty();\n                    tilecontent.prepend(\n                        $(mosaic.document.createElement(\"textarea\"))\n                            .addClass(\"mosaic-rich-text-textarea\")\n                            .html(text.trim())\n                            .height(height),\n                    );\n                }\n            },\n        });\n\n        // Register page properties action\n        self.registerAction(\"properties\", {\n            exec: function () {\n                mosaic.overlay.open(\"all\");\n            },\n        });\n\n        self.registerAction(\"layout\", {\n            /* layout drop down */\n            exec: function () {\n                var $container = $(\".mosaic-button-group-layout\");\n                $container.toggleClass(\"active\");\n            },\n            visible: function () {\n                return true;\n            },\n        });\n\n        // register customize layout button\n        self.registerAction(\"customizelayout\", {\n            exec: function () {\n                mosaic.setSelectedContentLayout(\"\"); // clear selected layout, will use stored layout then\n                $(\".mosaic-toolbar-secondary-functions\").removeClass(\"d-none\");\n                $(\".mosaic-button-customizelayout\").hide();\n                $(\".mosaic-button-savelayout\").show();\n                // go through each tile and add movable\n                $(\".mosaic-panel .mosaic-tile\", mosaic.document).each(function () {\n                    var $mosaic_tile = $(this).data(\"mosaic-tile\");\n                    $mosaic_tile.makeMovable();\n                    $mosaic_tile.$el.mosaicAddDrag();\n                });\n                $(\".mosaic-button-group-layout\").removeClass(\"active\");\n            },\n            visible: function () {\n                return mosaic.hasContentLayout && mosaic.options.canChangeLayout;\n            },\n        });\n\n        // register change layout button\n        self.registerAction(\"changelayout\", {\n            exec: function () {\n                var yes = mosaic.hasContentLayout;\n                if (!yes) {\n                    yes = confirm(\n                        \"Changing your layout will destroy all existing custom layout \" +\n                        \"settings you have in place. Are you sure you want to continue?\",\n                    );\n                }\n                if (yes) {\n                    mosaic.selectLayout();\n                }\n                $(\".mosaic-button-group-layout\").removeClass(\"active\");\n            },\n            visible: function () {\n                return mosaic.options.available_layouts.length > 0;\n            },\n        });\n\n        // register change layout button\n        self.registerAction(\"savelayout\", {\n            exec: function () {\n                mosaic.saveLayout();\n                $(\".mosaic-button-group-layout\").removeClass(\"active\");\n            },\n            visible: function () {\n                return true;\n            },\n        });\n\n        // Register add tile action\n        self.registerAction(\"add-tile\", {\n            exec: function () {\n                // Open overlay\n                var m = new Modal(\".mosaic-toolbar\", {\n                    modalSizeClass: \"modal-lg\",\n                    ajaxUrl:\n                        mosaic.options.context_url +\n                        \"/@@add-tile?form.button.Create=Create\",\n                });\n                m.show();\n            },\n        });\n\n        // Register format action\n        self.registerAction(\"format\", {\n            exec: function (source) {\n                var val = $(source).val();\n                var action = $(source).find(`[value=\"${val}\"]`).data(\"action\");\n                self.execAction(action, source);\n                // reset selector\n                $(source).select2(\"val\", \"none\");\n            },\n        });\n\n        // Register page-insert action\n        self.registerAction(\"insert\", {\n            exec: async function (source) {\n                // Local variables\n                var tile_config, tile_type;\n\n                // Check if value selected\n                if ($(source).val() === \"none\") {\n                    return false;\n                } else {\n                    tile_type = $(source).val();\n                }\n\n                // Deselect tiles\n                self.blurSelectedTile();\n\n                // Set actions\n                mosaic.toolbar.SelectedTileChange();\n\n                // Get tile config\n                for (const tile_group of mosaic.options.tiles) {\n                    for (const tile of tile_group.tiles) {\n                        if (tile.name === tile_type) {\n                            tile_config = tile;\n                        }\n                    }\n                }\n\n                // Create new app tile\n                if (tile_config.tile_type === \"textapp\") {\n                    // an app tile\n                    var uid = mosaic_utils.generate_uid();\n                    var tileUrl =\n                        mosaic.options.context_url + \"/@@\" + tile_type + \"/\" + uid;\n                    var html =\n                        \"<html><body>\" +\n                        mosaic.layoutManager.getDefaultValue(tile_config) +\n                        \"</body></html>\";\n                    mosaic.layoutManager.addAppTileHTML(tile_type, html, tileUrl);\n                } else if (tile_config.tile_type === \"app\") {\n                    // Load add form form selected tiletype\n                    utils.loading.show();\n\n                    const openAddFormInModal = function (html) {\n                        let initial = true;\n                        const m = new Modal(self.mosaic.panels[0], {\n                            html: html,\n                            modalSizeClass: \"modal-lg\",\n                            position: \"center top\",\n                            buttons:\n                                '.formControls > button[type=\"submit\"], .actionButtons > button[type=\"submit\"]',\n                        });\n                        m.on(\"after-render\", () => {\n                            // Remove field errors since the user has not actually\n                            // been able to fill out the form yet\n                            var $mContent = m.$modalContent;\n                            if (initial) {\n                                $(\".field.error\", $mContent).removeClass(\"error\");\n                                $(\n                                    \".fieldErrorBox,.portalMessage,.alert,.invalid-feedback\",\n                                    $mContent,\n                                ).remove();\n                            }\n                            $('button[name*=\"cancel\"]', $mContent)\n                                .off(\"click\")\n                                .on(\"click\", function () {\n                                    m.hide();\n                                });\n                            log.debug(\"after-render\");\n                        });\n                        m.on(\"formActionSuccess\", (event, response, state, xhr) => {\n                            log.debug(\"TileAddForm ActionSuccess\");\n                            var tileUrl = xhr.getResponseHeader(\"X-Tile-Url\");\n                            if (tileUrl && initial) {\n                                mosaic.layoutManager.addAppTileHTML(\n                                    tile_type,\n                                    response,\n                                    tileUrl,\n                                );\n                                initial = false;\n                            }\n                            m.hide();\n                        });\n                        m.show();\n                    };\n\n                    fetch(\n                        `${mosaic.options.context_url}/@@add-tile?tiletype=${tile_type}&form.button.Create=Create`,\n                        {\n                            method: \"GET\",\n                        })\n                        .then(response => {\n                            if (!response.ok) {\n                                alert(`Could not create tile ${tile_type}: ${response.statusText}`);\n                                return;\n                            }\n                            return response.text();\n                        })\n                        .then(value => {\n                            utils.loading.hide();\n\n                            // Read form\n                            const $value = $(value);\n                            let action_url = $value.find(\"#add_tile\").attr(\"action\");\n                            const authenticator = $value\n                                .find('[name=\"_authenticator\"]')\n                                .val();\n\n                            // Auto-submit add-form when all required fields are filled\n                            if (\n                                $(\"form .required\", $value).filter(function () {\n                                    var val = $(this)\n                                        .parents(\".field\")\n                                        .first()\n                                        .find(\"input, select, textarea\")\n                                        .not('[type=\"hidden\"]')\n                                        .last()\n                                        .val();\n                                    return val === null || val.length === 0;\n                                }).length > 0\n                            ) {\n                                openAddFormInModal(value);\n                            } else if (action_url) {\n                                $(\"form\", $value).ajaxSubmit({\n                                    type: \"POST\",\n                                    url: action_url,\n                                    data: {\n                                        \"buttons.save\": \"Save\",\n                                        \"_authenticator\": authenticator,\n                                    },\n                                    success: function (value, state, xhr) {\n                                        var tileUrl =\n                                            xhr.getResponseHeader(\"X-Tile-Url\");\n                                        if (tileUrl) {\n                                            mosaic.layoutManager.addAppTileHTML(\n                                                tile_type,\n                                                value,\n                                                tileUrl,\n                                            );\n                                        } else {\n                                            openAddFormInModal(value);\n                                        }\n                                    },\n                                });\n                            }\n                        });\n                } else {\n                    // Add tile\n                    await mosaic.layoutManager.addTile(\n                        tile_type,\n                        mosaic.layoutManager.getDefaultValue(tile_config),\n                    );\n                }\n\n                // reset menu\n                $(source).select2(\"val\", \"none\");\n\n                // Normal exit\n                return true;\n            },\n        });\n\n        // Handle keypress event, check for shortcuts\n        $(document).on(\"keypress\", function (e) {\n            // Action name\n            var action = \"\";\n\n            // Loop through shortcuts\n            $(mosaic.actionManager.shortcuts).each(function () {\n                // Check if shortcut matched\n                if (\n                    (e.ctrlKey === this.ctrl ||\n                        (navigator.userAgent.toLowerCase().indexOf(\"macintosh\") !== -1 &&\n                            e.metaKey === this.ctrl)) &&\n                    (e.altKey === this.alt || e.altKey === undefined) &&\n                    e.shiftKey === this.shift &&\n                    e.key.toUpperCase().charCodeAt(0) === this.charCode\n                ) {\n                    // Found action\n                    action = this.action;\n                }\n            });\n\n            // Check if shortcut found\n            if (action !== \"\") {\n                // Exec actions\n                mosaic.actionManager.actions[action].exec();\n\n                // Prevent other actions\n                return false;\n            }\n\n            // Normal exit\n            return true;\n        });\n    }\n\n    blurSelectedTile() {\n        this.mosaic.document.querySelectorAll(\".mosaic-selected-tile\").forEach((el) => {\n            $(el).data(\"mosaic-tile\").blur();\n        });\n    }\n\n    mosaicExecAction() {\n        // Loop through matched elements\n        return this.each(function () {\n            // Check if actions specified\n            if ($(this).data(\"action\") !== \"\") {\n                var mgr = $.mosaic.actionManager;\n\n                // Exec actions\n                mgr.actions[$(this).data(\"action\")].exec(this);\n            }\n        });\n    }\n}\n\nexport default ActionManager;\n"],"names":["log","logging","getLogger","constructor","mosaic","this","actions","shortcuts","registerAction","name","options","exec","shortcut","ctrl","alt","shift","key","visible","charCode","toUpperCase","charCodeAt","action","push","execAction","source","error","getPrefixedClassName","indexOf","charAt","slice","initActions","self","arguments","length","value","$","document","toggleClass","i","j","group","formats","category","removeClass","parents","first","addClass","saving","blurSelectedTile","toolbar","SelectedTileChange","queue","next","layoutManager","saveLayoutToForm","save","trigger","setTimeout","window","open","context_url","tilecontent","text","height","children","find","html","empty","prepend","createElement","trim","overlay","setSelectedContentLayout","hide","show","each","$mosaic_tile","data","makeMovable","$el","mosaicAddDrag","hasContentLayout","canChangeLayout","yes","confirm","selectLayout","available_layouts","saveLayout","Modal","modalSizeClass","ajaxUrl","val","select2","async","tile_config","tile_type","tile_group","tiles","tile","uid","mosaic_utils","generate_uid","tileUrl","getDefaultValue","addAppTileHTML","utils","loading","openAddFormInModal","initial","m","panels","position","buttons","on","$mContent","$modalContent","remove","off","debug","event","response","state","xhr","getResponseHeader","fetch","method","then","ok","alert","statusText","$value","action_url","attr","authenticator","filter","not","last","ajaxSubmit","type","url","success","addTile","e","actionManager","ctrlKey","navigator","userAgent","toLowerCase","metaKey","altKey","undefined","shiftKey","querySelectorAll","forEach","el","blur","mosaicExecAction"],"sourceRoot":""}